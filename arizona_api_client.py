"""
API client for fetching player statistics and server status from Arizona RP
"""

import asyncio
import aiohttp
from typing import Dict, Any, Tuple, Optional
import re
from datetime import datetime
import os
# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ (–º–æ–∂–Ω–æ –≤—ã–Ω–µ—Å—Ç–∏ –≤ config)
API_URL = os.getenv("API_URL")
API_KEY = os.getenv("API_KEY")
REQUEST_TIMEOUT = 10


class ArizonaRPAPIClient:
    """Client for fetching Arizona RP player information and server status"""

    def __init__(self):
        self.api_url = API_URL
        self.api_key = API_KEY
        self.timeout = REQUEST_TIMEOUT

        # –ö—ç—à –¥–ª—è —Å–µ—Ä–≤–µ—Ä–æ–≤
        self._servers_cache: Dict[int, Dict[str, Any]] = {}
        self._cache_timestamp: Optional[datetime] = None
        self._cache_duration = 300  # 5 –º–∏–Ω—É—Ç

    # =============== –ü—Ä–æ–≤–µ—Ä–∫–∏ =================
    def validate_nickname(self, nickname: str) -> Tuple[bool, Optional[str]]:
        if not nickname:
            return False, "–ù–∏–∫ –∏–≥—Ä–æ–∫–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º."
        if len(nickname) < 3:
            return False, "–ù–∏–∫ –∏–≥—Ä–æ–∫–∞ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞."
        if len(nickname) > 24:
            return False, "–ù–∏–∫ –∏–≥—Ä–æ–∫–∞ –Ω–µ –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å –±–æ–ª–µ–µ 24 —Å–∏–º–≤–æ–ª–æ–≤."
        if not re.match(r'^[a-zA-Z0-9_]+$', nickname):
            return False, "–ù–∏–∫ –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã –∏ –ø–æ–¥—á—ë—Ä–∫–∏–≤–∞–Ω–∏—è."
        return True, None

    def validate_server_id(self, server_id: int) -> Tuple[bool, Optional[str]]:
        valid_servers = list(range(1, 33)) + [200] + list(range(101, 104))
        if server_id not in valid_servers:
            return False, "–ù–µ–≤–µ—Ä–Ω—ã–π ID —Å–µ—Ä–≤–µ—Ä–∞. –î–æ—Å—Ç—É–ø–Ω—ã–µ: –ü–ö 1‚Äì32, ViceCity (200), –ú–æ–±–∞–π–ª 101‚Äì103"
        return True, None

    # =============== API –∏–≥—Ä–æ–∫–∞ =================
    async def fetch_player_stats(
        self, nickname: str, server_id: int
    ) -> Tuple[Optional[Dict[str, Any]], Optional[str]]:

        if not self.api_key:
            return None, "‚ùå API –∫–ª—é—á –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω."

        headers = {"X-API-Key": self.api_key, "User-Agent": "InfoBot/1.0"}
        params = {"nickname": nickname, "serverId": server_id}

        try:
            timeout = aiohttp.ClientTimeout(total=self.timeout)
            async with aiohttp.ClientSession(timeout=timeout) as session:
                async with session.get(self.api_url, headers=headers, params=params) as response:

                    if response.status != 200:
                        return None, f"‚ùå –û—à–∏–±–∫–∞ API: {response.status}"

                    data = await response.json()
                    if not isinstance(data, dict):
                        return None, "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ API."

                    return data, None

        except asyncio.TimeoutError:
            return None, "‚è∞ –ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è API."
        except aiohttp.ClientError:
            return None, "üåê –û—à–∏–±–∫–∞ —Å–µ—Ç–µ–≤–æ–≥–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è."
        except Exception as e:
            return None, f"‚ùå –ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}"

    # =============== –°–µ—Ä–≤–µ—Ä—ã =================
    def get_server_name(self, server_id: int) -> str:
        names = {
            1: "Phoenix", 2: "Tucson", 3: "Scottdale", 4: "Chandler", 5: "Brainburg",
            6: "Saint Rose", 7: "Mesa", 8: "Red-Rock", 9: "Yuma", 10: "Surprise",
            11: "Prescott", 12: "Glendale", 13: "Kingman", 14: "Winslow", 15: "Payson",
            16: "Gilbert", 17: "Show Low", 18: "Casa-Grande", 19: "Page", 20: "Sun-City",
            21: "Queen-Creek", 22: "Sedona", 23: "Holiday", 24: "Wednesday", 25: "Yava",
            26: "Faraway", 27: "Bumble Bee", 28: "Christmas", 29: "Mirage", 30: "Love",
            31: "Drake", 32: "Space", 200: "ViceCity",
            101: "Mobile I", 102: "Mobile II", 103: "Mobile III"
        }
        return names.get(server_id, f"Server {server_id}")

    async def fetch_server_status(self, server_id: int) -> Dict[str, Any]:
        """–§–µ–π–∫–æ–≤—ã–π –ø—Ä–∏–º–µ—Ä, –º–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π API –æ–Ω–ª–∞–π–Ω"""
        return {"server_id": server_id, "online": 500, "max_online": 1000, "is_online": True}

    async def fetch_all_servers_status(self) -> Dict[int, Dict[str, Any]]:
        if self._cache_timestamp and (datetime.now() - self._cache_timestamp).total_seconds() < self._cache_duration:
            return self._servers_cache.copy()

        servers_info = {}
        server_ids = list(range(1, 33)) + [200] + list(range(101, 104))

        for sid in server_ids:
            servers_info[sid] = await self.fetch_server_status(sid)

        self._servers_cache = servers_info.copy()
        self._cache_timestamp = datetime.now()
        return servers_info

    async def get_servers_info(self) -> str:
        servers = await self.fetch_all_servers_status()
        msg = "üìä –û–Ω–ª–∞–π–Ω —Å–µ—Ä–≤–µ—Ä–æ–≤ Arizona RP\n\n"

        for sid, info in servers.items():
            name = self.get_server_name(sid)
            if not info.get("is_online", False):
                msg += f"üî¥ [{sid}] {name} ‚Äî Offline\n"
            else:
                msg += f"üü¢ [{sid}] {name} ‚Äî {info['online']} / {info['max_online']}\n"
        return msg


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π –∫–ª–∏–µ–Ω—Ç
arizona_api = ArizonaRPAPIClient()
